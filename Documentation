# üìö Documentation

### üîß Data Structures
- **HashMap<String, InventoryItem>**  
  Used to store and quickly access inventory items by their unique ID.

- **ArrayList<InventoryItem>**  
  Used when displaying all items or generating reports.

- **Plain Text File (`data.txt`)**  
  All data is saved in a text file, one item per line, with fields separated by the `|` character.

### üß† Algorithms & Logic
- **CRUD Operations**  
  The program uses a menu-based interface allowing the user to create, read, update, and delete items.

- **TXT Serialization and Deserialization**  
  - When saving, each object is converted into a string in the format: `ID|Name|Quantity|Price`
  - When loading, each line is split using `split("\\|")` and converted back into an `InventoryItem` object.

- **Input Validation**  
  Custom methods ensure that no field is empty and that numeric fields like quantity and price are valid numbers.

- **Report Generation**  
  Iterates through all inventory items to calculate the total number of items and the total inventory value.

### üß© Classes / Modules
- **InventoryItem.java**  
  Represents a single inventory item, with methods to convert to and from text format.

- **InventoryManager.java**  
  Handles all inventory-related logic: add, update, delete, load, and save.

- **ReportGenerator.java**  
  Generates and displays summary statistics based on current inventory data.

- **Utils.java**  
  Contains utility functions for input reading and validation.

- **InventoryTracker.java**  
  The main class that presents the menu and controls the application flow.

### ‚ö†Ô∏è Challenges Faced
- **Data Storage Format**  
  Plain text (TXT) was chosen for easy readability and manual editing outside the program.

- **Error Handling**  
  Exception handling was implemented to keep the program stable during invalid input or file errors.

- **Project Structure**  
  To ensure code clarity and reusability, the logic was separated into modular classes.

- **Ensuring Unique IDs**  
  The application requires manual entry of unique IDs for each item ‚Äî which could be improved in the future.
